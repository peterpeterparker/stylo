/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { StyloPalette, StyloPaletteColor } from "./types/palette";
import { StyloConfig } from "./types/config";
import { StyloPlugin } from "./types/plugin";
import { StyloConfigToolbar, ToolbarActions, ToolbarAlign, ToolbarAnchorLink, ToolbarFontSize, ToolbarList } from "./types/toolbar";
import { ExecCommandAction } from "./types/execcommand";
import { EventEmitter } from "@stencil/core";
export { StyloPalette, StyloPaletteColor } from "./types/palette";
export { StyloConfig } from "./types/config";
export { StyloPlugin } from "./types/plugin";
export { StyloConfigToolbar, ToolbarActions, ToolbarAlign, ToolbarAnchorLink, ToolbarFontSize, ToolbarList } from "./types/toolbar";
export { ExecCommandAction } from "./types/execcommand";
export { EventEmitter } from "@stencil/core";
export namespace Components {
    interface StyloAdd {
    }
    interface StyloColor {
        /**
          * The current selected color provided as hexadecimal value
         */
        "colorHex": string;
        /**
          * The current selected color provided as a rgb value (without "rgb()", only value such as for example 255, 67, 54)
         */
        "colorRgb": string;
        /**
          * An accessibility label for the color input field
         */
        "inputAlt": string;
        /**
          * The palette of color.
         */
        "palette": StyloPalette[];
    }
    interface StyloColorInput {
        "colorHex": string;
        "colorRgb": string;
        "customColorRgb": string;
        "inputAlt": string;
    }
    interface StyloEditor {
        /**
          * Optional editor configurations - i18n provides language and optional list of custom translations - plugins, if provided, replaces the default plugin config - Toolbar, if provided, is merged with the default toolbar config - Menus, if provided, is merged with the default menus config
         */
        "config": StyloConfig | undefined;
        /**
          * The container (e.g. an article, a div, etc.) that contains the content, the paragraphs. Must have the attribute `contenteditable` set to `true`.
         */
        "containerRef": HTMLElement | undefined;
    }
    interface StyloList {
        "display": boolean;
        "focusFirstButton": () => Promise<void>;
    }
    interface StyloMenus {
    }
    interface StyloPlugins {
    }
    interface StyloToolbar {
        /**
          * If used in a standalone mode, the configuration can also be set. It will be applied over the default configuration.
         */
        "config": Partial<StyloConfigToolbar> | undefined;
        /**
          * To attach the inline editor event listeners to a specific container instead of the document
         */
        "containerRef": HTMLElement | undefined;
    }
    interface StyloToolbarAlign {
        "align": ToolbarAlign;
        "anchorEvent": MouseEvent | TouchEvent;
        "containerRef": HTMLElement | undefined;
    }
    interface StyloToolbarButton {
        "cssClass": string;
        "disableAction": boolean;
        "label": string;
    }
    interface StyloToolbarColor {
        "action": 'color' | 'background-color';
        "containerRef": HTMLElement | undefined;
    }
    interface StyloToolbarFontSize {
        "fontSize": ToolbarFontSize;
    }
    interface StyloToolbarLink {
        "anchorLink": ToolbarAnchorLink;
        "containerRef": HTMLElement | undefined;
        "linkCreated": EventEmitter<HTMLElement>;
        "toolbarActions": ToolbarActions;
    }
    interface StyloToolbarList {
        "list": ToolbarList;
    }
    interface StyloToolbarSeparator {
    }
    interface StyloToolbarText {
        "bold": boolean;
        "disabledTitle": boolean;
        "italic": boolean;
        "strikethrough": boolean;
        "underline": boolean;
    }
    interface StyloToolbarTriangle {
        "mobile": boolean;
    }
}
export interface StyloAddCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloAddElement;
}
export interface StyloColorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloColorElement;
}
export interface StyloColorInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloColorInputElement;
}
export interface StyloListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloListElement;
}
export interface StyloMenusCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloMenusElement;
}
export interface StyloToolbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloToolbarElement;
}
export interface StyloToolbarAlignCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloToolbarAlignElement;
}
export interface StyloToolbarButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloToolbarButtonElement;
}
export interface StyloToolbarColorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloToolbarColorElement;
}
export interface StyloToolbarFontSizeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloToolbarFontSizeElement;
}
export interface StyloToolbarLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloToolbarLinkElement;
}
export interface StyloToolbarListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloToolbarListElement;
}
export interface StyloToolbarTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLStyloToolbarTextElement;
}
declare global {
    interface HTMLStyloAddElement extends Components.StyloAdd, HTMLStencilElement {
    }
    var HTMLStyloAddElement: {
        prototype: HTMLStyloAddElement;
        new (): HTMLStyloAddElement;
    };
    interface HTMLStyloColorElement extends Components.StyloColor, HTMLStencilElement {
    }
    var HTMLStyloColorElement: {
        prototype: HTMLStyloColorElement;
        new (): HTMLStyloColorElement;
    };
    interface HTMLStyloColorInputElement extends Components.StyloColorInput, HTMLStencilElement {
    }
    var HTMLStyloColorInputElement: {
        prototype: HTMLStyloColorInputElement;
        new (): HTMLStyloColorInputElement;
    };
    interface HTMLStyloEditorElement extends Components.StyloEditor, HTMLStencilElement {
    }
    var HTMLStyloEditorElement: {
        prototype: HTMLStyloEditorElement;
        new (): HTMLStyloEditorElement;
    };
    interface HTMLStyloListElement extends Components.StyloList, HTMLStencilElement {
    }
    var HTMLStyloListElement: {
        prototype: HTMLStyloListElement;
        new (): HTMLStyloListElement;
    };
    interface HTMLStyloMenusElement extends Components.StyloMenus, HTMLStencilElement {
    }
    var HTMLStyloMenusElement: {
        prototype: HTMLStyloMenusElement;
        new (): HTMLStyloMenusElement;
    };
    interface HTMLStyloPluginsElement extends Components.StyloPlugins, HTMLStencilElement {
    }
    var HTMLStyloPluginsElement: {
        prototype: HTMLStyloPluginsElement;
        new (): HTMLStyloPluginsElement;
    };
    interface HTMLStyloToolbarElement extends Components.StyloToolbar, HTMLStencilElement {
    }
    var HTMLStyloToolbarElement: {
        prototype: HTMLStyloToolbarElement;
        new (): HTMLStyloToolbarElement;
    };
    interface HTMLStyloToolbarAlignElement extends Components.StyloToolbarAlign, HTMLStencilElement {
    }
    var HTMLStyloToolbarAlignElement: {
        prototype: HTMLStyloToolbarAlignElement;
        new (): HTMLStyloToolbarAlignElement;
    };
    interface HTMLStyloToolbarButtonElement extends Components.StyloToolbarButton, HTMLStencilElement {
    }
    var HTMLStyloToolbarButtonElement: {
        prototype: HTMLStyloToolbarButtonElement;
        new (): HTMLStyloToolbarButtonElement;
    };
    interface HTMLStyloToolbarColorElement extends Components.StyloToolbarColor, HTMLStencilElement {
    }
    var HTMLStyloToolbarColorElement: {
        prototype: HTMLStyloToolbarColorElement;
        new (): HTMLStyloToolbarColorElement;
    };
    interface HTMLStyloToolbarFontSizeElement extends Components.StyloToolbarFontSize, HTMLStencilElement {
    }
    var HTMLStyloToolbarFontSizeElement: {
        prototype: HTMLStyloToolbarFontSizeElement;
        new (): HTMLStyloToolbarFontSizeElement;
    };
    interface HTMLStyloToolbarLinkElement extends Components.StyloToolbarLink, HTMLStencilElement {
    }
    var HTMLStyloToolbarLinkElement: {
        prototype: HTMLStyloToolbarLinkElement;
        new (): HTMLStyloToolbarLinkElement;
    };
    interface HTMLStyloToolbarListElement extends Components.StyloToolbarList, HTMLStencilElement {
    }
    var HTMLStyloToolbarListElement: {
        prototype: HTMLStyloToolbarListElement;
        new (): HTMLStyloToolbarListElement;
    };
    interface HTMLStyloToolbarSeparatorElement extends Components.StyloToolbarSeparator, HTMLStencilElement {
    }
    var HTMLStyloToolbarSeparatorElement: {
        prototype: HTMLStyloToolbarSeparatorElement;
        new (): HTMLStyloToolbarSeparatorElement;
    };
    interface HTMLStyloToolbarTextElement extends Components.StyloToolbarText, HTMLStencilElement {
    }
    var HTMLStyloToolbarTextElement: {
        prototype: HTMLStyloToolbarTextElement;
        new (): HTMLStyloToolbarTextElement;
    };
    interface HTMLStyloToolbarTriangleElement extends Components.StyloToolbarTriangle, HTMLStencilElement {
    }
    var HTMLStyloToolbarTriangleElement: {
        prototype: HTMLStyloToolbarTriangleElement;
        new (): HTMLStyloToolbarTriangleElement;
    };
    interface HTMLElementTagNameMap {
        "stylo-add": HTMLStyloAddElement;
        "stylo-color": HTMLStyloColorElement;
        "stylo-color-input": HTMLStyloColorInputElement;
        "stylo-editor": HTMLStyloEditorElement;
        "stylo-list": HTMLStyloListElement;
        "stylo-menus": HTMLStyloMenusElement;
        "stylo-plugins": HTMLStyloPluginsElement;
        "stylo-toolbar": HTMLStyloToolbarElement;
        "stylo-toolbar-align": HTMLStyloToolbarAlignElement;
        "stylo-toolbar-button": HTMLStyloToolbarButtonElement;
        "stylo-toolbar-color": HTMLStyloToolbarColorElement;
        "stylo-toolbar-font-size": HTMLStyloToolbarFontSizeElement;
        "stylo-toolbar-link": HTMLStyloToolbarLinkElement;
        "stylo-toolbar-list": HTMLStyloToolbarListElement;
        "stylo-toolbar-separator": HTMLStyloToolbarSeparatorElement;
        "stylo-toolbar-text": HTMLStyloToolbarTextElement;
        "stylo-toolbar-triangle": HTMLStyloToolbarTriangleElement;
    }
}
declare namespace LocalJSX {
    interface StyloAdd {
        /**
          * If user types anything else than a "/" in an empty paragraph, hide the plugins.
         */
        "onHidePlugins"?: (event: StyloAddCustomEvent<void>) => void;
        /**
          * An event emitted when user click on the shadowed button. - If selected paragraph is empty, emitted straight away - If not empty, first a new paragraph is created and then event is emitted Event is catched in `<style-plugins/>` and used to trigger the display of list of plugins.
         */
        "onListPlugins"?: (event: StyloAddCustomEvent<HTMLElement | undefined>) => void;
        /**
          * Emits the paragraph that is selected either with mouse, touch or keyboard actions
         */
        "onSelectParagraph"?: (event: StyloAddCustomEvent<HTMLElement | undefined>) => void;
    }
    interface StyloColor {
        /**
          * The current selected color provided as hexadecimal value
         */
        "colorHex"?: string;
        /**
          * The current selected color provided as a rgb value (without "rgb()", only value such as for example 255, 67, 54)
         */
        "colorRgb"?: string;
        /**
          * An accessibility label for the color input field
         */
        "inputAlt"?: string;
        /**
          * Emit the selected color
         */
        "onColorChange"?: (event: StyloColorCustomEvent<StyloPaletteColor>) => void;
        /**
          * The palette of color.
         */
        "palette"?: StyloPalette[];
    }
    interface StyloColorInput {
        "colorHex"?: string;
        "colorRgb"?: string;
        "customColorRgb"?: string;
        "inputAlt"?: string;
        "onSelectHexColor"?: (event: StyloColorInputCustomEvent<StyloPaletteColor>) => void;
    }
    interface StyloEditor {
        /**
          * Optional editor configurations - i18n provides language and optional list of custom translations - plugins, if provided, replaces the default plugin config - Toolbar, if provided, is merged with the default toolbar config - Menus, if provided, is merged with the default menus config
         */
        "config"?: StyloConfig | undefined;
        /**
          * The container (e.g. an article, a div, etc.) that contains the content, the paragraphs. Must have the attribute `contenteditable` set to `true`.
         */
        "containerRef"?: HTMLElement | undefined;
    }
    interface StyloList {
        "display"?: boolean;
        /**
          * Emit which plugin the user want to apply.
         */
        "onApplyPlugin"?: (event: StyloListCustomEvent<StyloPlugin>) => void;
        /**
          * Emit when user actually do not want to apply a plugin.
         */
        "onCancelPlugins"?: (event: StyloListCustomEvent<void>) => void;
    }
    interface StyloMenus {
        "onMenuActivated"?: (event: StyloMenusCustomEvent<{paragraph: HTMLElement}>) => void;
    }
    interface StyloPlugins {
    }
    interface StyloToolbar {
        /**
          * If used in a standalone mode, the configuration can also be set. It will be applied over the default configuration.
         */
        "config"?: Partial<StyloConfigToolbar> | undefined;
        /**
          * To attach the inline editor event listeners to a specific container instead of the document
         */
        "containerRef"?: HTMLElement | undefined;
        /**
          * Triggered when a link is created by the user. The event detail is the container
         */
        "onLinkCreated"?: (event: StyloToolbarCustomEvent<HTMLElement>) => void;
        /**
          * Triggered when the style is modified (bold, italic, color, alignment, etc.). The event detail is the container
         */
        "onStyleDidChange"?: (event: StyloToolbarCustomEvent<HTMLElement>) => void;
        "onToolbarActivated"?: (event: StyloToolbarCustomEvent<boolean>) => void;
    }
    interface StyloToolbarAlign {
        "align"?: ToolbarAlign;
        "anchorEvent"?: MouseEvent | TouchEvent;
        "containerRef"?: HTMLElement | undefined;
        "onAlignModified"?: (event: StyloToolbarAlignCustomEvent<any>) => void;
    }
    interface StyloToolbarButton {
        "cssClass"?: string;
        "disableAction"?: boolean;
        "label"?: string;
        "onAction"?: (event: StyloToolbarButtonCustomEvent<UIEvent>) => void;
    }
    interface StyloToolbarColor {
        "action"?: 'color' | 'background-color';
        "containerRef"?: HTMLElement | undefined;
        "onClose"?: (event: StyloToolbarColorCustomEvent<void>) => void;
        "onExecCommand"?: (event: StyloToolbarColorCustomEvent<ExecCommandAction>) => void;
    }
    interface StyloToolbarFontSize {
        "fontSize"?: ToolbarFontSize;
        "onExecCommand"?: (event: StyloToolbarFontSizeCustomEvent<ExecCommandAction>) => void;
    }
    interface StyloToolbarLink {
        "anchorLink"?: ToolbarAnchorLink;
        "containerRef"?: HTMLElement | undefined;
        "linkCreated"?: EventEmitter<HTMLElement>;
        "onClose"?: (event: StyloToolbarLinkCustomEvent<void>) => void;
        "onLinkModified"?: (event: StyloToolbarLinkCustomEvent<boolean>) => void;
        "toolbarActions"?: ToolbarActions;
    }
    interface StyloToolbarList {
        "list"?: ToolbarList;
        "onExecCommand"?: (event: StyloToolbarListCustomEvent<ExecCommandAction>) => void;
    }
    interface StyloToolbarSeparator {
    }
    interface StyloToolbarText {
        "bold"?: boolean;
        "disabledTitle"?: boolean;
        "italic"?: boolean;
        "onExecCommand"?: (event: StyloToolbarTextCustomEvent<ExecCommandAction>) => void;
        "strikethrough"?: boolean;
        "underline"?: boolean;
    }
    interface StyloToolbarTriangle {
        "mobile"?: boolean;
    }
    interface IntrinsicElements {
        "stylo-add": StyloAdd;
        "stylo-color": StyloColor;
        "stylo-color-input": StyloColorInput;
        "stylo-editor": StyloEditor;
        "stylo-list": StyloList;
        "stylo-menus": StyloMenus;
        "stylo-plugins": StyloPlugins;
        "stylo-toolbar": StyloToolbar;
        "stylo-toolbar-align": StyloToolbarAlign;
        "stylo-toolbar-button": StyloToolbarButton;
        "stylo-toolbar-color": StyloToolbarColor;
        "stylo-toolbar-font-size": StyloToolbarFontSize;
        "stylo-toolbar-link": StyloToolbarLink;
        "stylo-toolbar-list": StyloToolbarList;
        "stylo-toolbar-separator": StyloToolbarSeparator;
        "stylo-toolbar-text": StyloToolbarText;
        "stylo-toolbar-triangle": StyloToolbarTriangle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "stylo-add": LocalJSX.StyloAdd & JSXBase.HTMLAttributes<HTMLStyloAddElement>;
            "stylo-color": LocalJSX.StyloColor & JSXBase.HTMLAttributes<HTMLStyloColorElement>;
            "stylo-color-input": LocalJSX.StyloColorInput & JSXBase.HTMLAttributes<HTMLStyloColorInputElement>;
            "stylo-editor": LocalJSX.StyloEditor & JSXBase.HTMLAttributes<HTMLStyloEditorElement>;
            "stylo-list": LocalJSX.StyloList & JSXBase.HTMLAttributes<HTMLStyloListElement>;
            "stylo-menus": LocalJSX.StyloMenus & JSXBase.HTMLAttributes<HTMLStyloMenusElement>;
            "stylo-plugins": LocalJSX.StyloPlugins & JSXBase.HTMLAttributes<HTMLStyloPluginsElement>;
            "stylo-toolbar": LocalJSX.StyloToolbar & JSXBase.HTMLAttributes<HTMLStyloToolbarElement>;
            "stylo-toolbar-align": LocalJSX.StyloToolbarAlign & JSXBase.HTMLAttributes<HTMLStyloToolbarAlignElement>;
            "stylo-toolbar-button": LocalJSX.StyloToolbarButton & JSXBase.HTMLAttributes<HTMLStyloToolbarButtonElement>;
            "stylo-toolbar-color": LocalJSX.StyloToolbarColor & JSXBase.HTMLAttributes<HTMLStyloToolbarColorElement>;
            "stylo-toolbar-font-size": LocalJSX.StyloToolbarFontSize & JSXBase.HTMLAttributes<HTMLStyloToolbarFontSizeElement>;
            "stylo-toolbar-link": LocalJSX.StyloToolbarLink & JSXBase.HTMLAttributes<HTMLStyloToolbarLinkElement>;
            "stylo-toolbar-list": LocalJSX.StyloToolbarList & JSXBase.HTMLAttributes<HTMLStyloToolbarListElement>;
            "stylo-toolbar-separator": LocalJSX.StyloToolbarSeparator & JSXBase.HTMLAttributes<HTMLStyloToolbarSeparatorElement>;
            "stylo-toolbar-text": LocalJSX.StyloToolbarText & JSXBase.HTMLAttributes<HTMLStyloToolbarTextElement>;
            "stylo-toolbar-triangle": LocalJSX.StyloToolbarTriangle & JSXBase.HTMLAttributes<HTMLStyloToolbarTriangleElement>;
        }
    }
}
